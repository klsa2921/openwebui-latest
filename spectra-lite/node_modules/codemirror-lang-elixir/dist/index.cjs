'use strict';

var language = require('@codemirror/language');
var state = require('@codemirror/state');
var view = require('@codemirror/view');
var lezerElixir = require('lezer-elixir');

/**
A syntax provider based on the [Lezer Elixir parser](https://github.com/lezer-parser/elixir),
extended with highlighting and indentation information.
*/
const elixirLanguage = language.LRLanguage.define({
    name: "elixir",
    parser: lezerElixir.parser.configure({
        props: [
            language.indentNodeProp.add({
                "DoBlock AfterBlock ElseBlock CatchBlock RescueBlock": withContinuedStabClause(language.continuedIndent({
                    except: /^\s*(after|else|catch|rescue|end)\b/,
                })),
                AnonymousFunction: withContinuedStabClause(language.delimitedIndent({ closing: "end", align: false })),
                Block: withContinuedStabClause(language.delimitedIndent({ closing: ")", align: false })),
                StabClause: language.continuedIndent(),
                List: language.delimitedIndent({ closing: "]", align: false }),
                Tuple: language.delimitedIndent({ closing: "}", align: false }),
                Bitstring: language.delimitedIndent({ closing: ">>", align: false }),
                Arguments: language.delimitedIndent({ closing: ")", align: false }),
                Map: language.delimitedIndent({ closing: "}", align: false }),
                "String Charlist Sigil": language.flatIndent,
                BinaryOperator: language.continuedIndent(),
                Pair: language.continuedIndent(),
            }),
            language.foldNodeProp.add({
                "DoBlock Block List Tuple Bitstring AnonymousFunction": language.foldInside,
                Map: foldMap,
            }),
        ],
    }),
    languageData: {
        commentTokens: { line: "#" },
        closeBrackets: {
            brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
            // Built-in sigils
            stringPrefixes: ["~s", "~S", "~r", "~R", "~c", "~C", "~D", "~N"],
        },
        indentOnInput: /^\s*([\}\]\)]|>>|after|else|catch|rescue|end)|.*->$/,
    },
});
function withContinuedStabClause(baseStrategy) {
    return (context) => {
        var _a, _b, _c, _d;
        const before = context.node.childBefore(context.pos);
        // If end is being introduced, use the top-level node indentation
        if (((_b = (_a = context.node.lastChild) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.name) === "end" &&
            context.textAfter.endsWith("end")) {
            return context.baseIndentFor(context.node);
        }
        // If a new stab clause is introduced, we give it the same indentation
        // as the previous one
        if (((_c = before === null || before === void 0 ? void 0 : before.type) === null || _c === void 0 ? void 0 : _c.name) === "StabClause" &&
            context.textAfter.endsWith("->")) {
            return context.baseIndentFor(before);
        }
        // If we are positioned right after a child stab clause, we keep
        // that stab clause's indentation
        if (((_d = before === null || before === void 0 ? void 0 : before.type) === null || _d === void 0 ? void 0 : _d.name) === "StabClause") {
            return context.baseIndentFor(before) + context.unit;
        }
        return baseStrategy(context);
    };
}
function foldMap(context) {
    const open = context.getChild("{");
    const close = context.getChild("}");
    if (open && close) {
        return { from: open.to, to: close.from };
    }
    else {
        return null;
    }
}

/**
This command, when invoked inside a do-block or an anonymous
function, inserts the closing end when applicable.
*/
const insertNewlineCloseEnd = (view) => {
    const { state: state$1, dispatch } = view;
    const tree = language.syntaxTree(state$1);
    const indentationUnit = language.getIndentUnit(state$1);
    let apply = true;
    const changes = state$1.changeByRange((range) => {
        if (!range.empty || !elixirLanguage.isActiveAt(state$1, range.from)) {
            apply = false;
            return { range };
        }
        const node = tree.resolve(range.from, -1);
        const parent = endDelimitedParent(node);
        if (parent && !checkAllClosed(parent)) {
            const indentation = language.getIndentation(state$1, parent.from + 1) || indentationUnit;
            const innerIndent = language.indentString(state$1, indentation);
            const outerIndent = language.indentString(state$1, indentation - indentationUnit);
            const insertPre = `\n${innerIndent}`;
            const insertPost = `\n${outerIndent}end`;
            const newPos = range.from + insertPre.length;
            return {
                range: state.EditorSelection.cursor(newPos),
                changes: [
                    { from: range.from, to: range.to, insert: insertPre + insertPost },
                ],
            };
        }
        apply = false;
        return { range };
    });
    if (apply) {
        dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
    }
    else {
        return false;
    }
};
function endDelimitedParent(node) {
    let cur = node;
    if (cur && cur.type.name === "do") {
        cur = cur.parent;
    }
    if (cur && cur.type.name === "Operator") {
        cur = cur.parent;
    }
    if (cur && (cur.type.name === "StabClause" || cur.type.name === "fn")) {
        cur = cur.parent;
    }
    if (cur && isEndDelimited(cur)) {
        return cur;
    }
    else {
        return null;
    }
}
function isEndDelimited(node) {
    return node.type.name === "DoBlock" || node.type.name === "AnonymousFunction";
}
function checkAllClosed(node) {
    var _a, _b;
    let cur = node;
    while (cur) {
        if (isEndDelimited(cur)) {
            if (((_b = (_a = cur.lastChild) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.name) !== "end") {
                return false;
            }
        }
        cur = cur.parent;
    }
    return true;
}

const elixirKeymap = [{ key: "Enter", run: insertNewlineCloseEnd }];
/**
Elixir language support.
*/
function elixir() {
    const support = [state.Prec.high(view.keymap.of(elixirKeymap))];
    return new language.LanguageSupport(elixirLanguage, support);
}

exports.elixir = elixir;
exports.elixirLanguage = elixirLanguage;
