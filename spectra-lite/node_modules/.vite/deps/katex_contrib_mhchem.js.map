{
  "version": 3,
  "sources": ["../../katex/dist/contrib/mhchem.mjs"],
  "sourcesContent": ["import katex from '../katex.mjs';\n\n/* eslint-disable */\n\n/* -*- Mode: JavaScript; indent-tabs-mode:nil; js-indent-level: 2 -*- */\n\n/* vim: set ts=2 et sw=2 tw=80: */\n\n/*************************************************************\n *\n *  KaTeX mhchem.js\n *\n *  This file implements a KaTeX version of mhchem version 3.3.0.\n *  It is adapted from MathJax/extensions/TeX/mhchem.js\n *  It differs from the MathJax version as follows:\n *    1. The interface is changed so that it can be called from KaTeX, not MathJax.\n *    2. \\rlap and \\llap are replaced with \\mathrlap and \\mathllap.\n *    3. Four lines of code are edited in order to use \\raisebox instead of \\raise.\n *    4. The reaction arrow code is simplified. All reaction arrows are rendered\n *       using KaTeX extensible arrows instead of building non-extensible arrows.\n *    5. \\tripledash vertical alignment is slightly adjusted.\n *\n *    This code, as other KaTeX code, is released under the MIT license.\n * \n * /*************************************************************\n *\n *  MathJax/extensions/TeX/mhchem.js\n *\n *  Implements the \\ce command for handling chemical formulas\n *  from the mhchem LaTeX package.\n *\n *  ---------------------------------------------------------------------\n *\n *  Copyright (c) 2011-2015 The MathJax Consortium\n *  Copyright (c) 2015-2018 Martin Hensel\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n//\n// Coding Style\n//   - use '' for identifiers that can by minified/uglified\n//   - use \"\" for strings that need to stay untouched\n// version: \"3.3.0\" for MathJax and KaTeX\n// Add \\ce, \\pu, and \\tripledash to the KaTeX macros.\nkatex.__defineMacro(\"\\\\ce\", function (context) {\n  return chemParse(context.consumeArgs(1)[0], \"ce\");\n});\n\nkatex.__defineMacro(\"\\\\pu\", function (context) {\n  return chemParse(context.consumeArgs(1)[0], \"pu\");\n}); //  Needed for \\bond for the ~ forms\n//  Raise by 2.56mu, not 2mu. We're raising a hyphen-minus, U+002D, not \n//  a mathematical minus, U+2212. So we need that extra 0.56.\n\n\nkatex.__defineMacro(\"\\\\tripledash\", \"{\\\\vphantom{-}\\\\raisebox{2.56mu}{$\\\\mkern2mu\" + \"\\\\tiny\\\\text{-}\\\\mkern1mu\\\\text{-}\\\\mkern1mu\\\\text{-}\\\\mkern2mu$}}\");\n//  This is the main function for handing the \\ce and \\pu commands.\n//  It takes the argument to \\ce or \\pu and returns the corresponding TeX string.\n//\n\nvar chemParse = function chemParse(tokens, stateMachine) {\n  // Recreate the argument string from KaTeX's array of tokens.\n  var str = \"\";\n  var expectedLoc = tokens.length && tokens[tokens.length - 1].loc.start;\n\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    if (tokens[i].loc.start > expectedLoc) {\n      // context.consumeArgs has eaten a space.\n      str += \" \";\n      expectedLoc = tokens[i].loc.start;\n    }\n\n    str += tokens[i].text;\n    expectedLoc += tokens[i].text.length;\n  }\n\n  var tex = texify.go(mhchemParser.go(str, stateMachine));\n  return tex;\n}; //\n// Core parser for mhchem syntax  (recursive)\n//\n\n/** @type {MhchemParser} */\n\n\nvar mhchemParser = {\n  //\n  // Parses mchem \\ce syntax\n  //\n  // Call like\n  //   go(\"H2O\");\n  //\n  go: function go(input, stateMachine) {\n    if (!input) {\n      return [];\n    }\n\n    if (stateMachine === undefined) {\n      stateMachine = 'ce';\n    }\n\n    var state = '0'; //\n    // String buffers for parsing:\n    //\n    // buffer.a == amount\n    // buffer.o == element\n    // buffer.b == left-side superscript\n    // buffer.p == left-side subscript\n    // buffer.q == right-side subscript\n    // buffer.d == right-side superscript\n    //\n    // buffer.r == arrow\n    // buffer.rdt == arrow, script above, type\n    // buffer.rd == arrow, script above, content\n    // buffer.rqt == arrow, script below, type\n    // buffer.rq == arrow, script below, content\n    //\n    // buffer.text_\n    // buffer.rm\n    // etc.\n    //\n    // buffer.parenthesisLevel == int, starting at 0\n    // buffer.sb == bool, space before\n    // buffer.beginsWithBond == bool\n    //\n    // These letters are also used as state names.\n    //\n    // Other states:\n    // 0 == begin of main part (arrow/operator unlikely)\n    // 1 == next entity\n    // 2 == next entity (arrow/operator unlikely)\n    // 3 == next atom\n    // c == macro\n    //\n\n    /** @type {Buffer} */\n\n    var buffer = {};\n    buffer['parenthesisLevel'] = 0;\n    input = input.replace(/\\n/g, \" \");\n    input = input.replace(/[\\u2212\\u2013\\u2014\\u2010]/g, \"-\");\n    input = input.replace(/[\\u2026]/g, \"...\"); //\n    // Looks through mhchemParser.transitions, to execute a matching action\n    // (recursive)\n    //\n\n    var lastInput;\n    var watchdog = 10;\n    /** @type {ParserOutput[]} */\n\n    var output = [];\n\n    while (true) {\n      if (lastInput !== input) {\n        watchdog = 10;\n        lastInput = input;\n      } else {\n        watchdog--;\n      } //\n      // Find actions in transition table\n      //\n\n\n      var machine = mhchemParser.stateMachines[stateMachine];\n      var t = machine.transitions[state] || machine.transitions['*'];\n\n      iterateTransitions: for (var i = 0; i < t.length; i++) {\n        var matches = mhchemParser.patterns.match_(t[i].pattern, input);\n\n        if (matches) {\n          //\n          // Execute actions\n          //\n          var task = t[i].task;\n\n          for (var iA = 0; iA < task.action_.length; iA++) {\n            var o; //\n            // Find and execute action\n            //\n\n            if (machine.actions[task.action_[iA].type_]) {\n              o = machine.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n            } else if (mhchemParser.actions[task.action_[iA].type_]) {\n              o = mhchemParser.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n            } else {\n              throw [\"MhchemBugA\", \"mhchem bug A. Please report. (\" + task.action_[iA].type_ + \")\"]; // Trying to use non-existing action\n            } //\n            // Add output\n            //\n\n\n            mhchemParser.concatArray(output, o);\n          } //\n          // Set next state,\n          // Shorten input,\n          // Continue with next character\n          //   (= apply only one transition per position)\n          //\n\n\n          state = task.nextState || state;\n\n          if (input.length > 0) {\n            if (!task.revisit) {\n              input = matches.remainder;\n            }\n\n            if (!task.toContinue) {\n              break iterateTransitions;\n            }\n          } else {\n            return output;\n          }\n        }\n      } //\n      // Prevent infinite loop\n      //\n\n\n      if (watchdog <= 0) {\n        throw [\"MhchemBugU\", \"mhchem bug U. Please report.\"]; // Unexpected character\n      }\n    }\n  },\n  concatArray: function concatArray(a, b) {\n    if (b) {\n      if (Array.isArray(b)) {\n        for (var iB = 0; iB < b.length; iB++) {\n          a.push(b[iB]);\n        }\n      } else {\n        a.push(b);\n      }\n    }\n  },\n  patterns: {\n    //\n    // Matching patterns\n    // either regexps or function that return null or {match_:\"a\", remainder:\"bc\"}\n    //\n    patterns: {\n      // property names must not look like integers (\"2\") for correct property traversal order, later on\n      'empty': /^$/,\n      'else': /^./,\n      'else2': /^./,\n      'space': /^\\s/,\n      'space A': /^\\s(?=[A-Z\\\\$])/,\n      'space$': /^\\s$/,\n      'a-z': /^[a-z]/,\n      'x': /^x/,\n      'x$': /^x$/,\n      'i$': /^i$/,\n      'letters': /^(?:[a-zA-Z\\u03B1-\\u03C9\\u0391-\\u03A9?@]|(?:\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))))+/,\n      '\\\\greek': /^\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))/,\n      'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,\n      '$one lowercase latin letter$ $': /^\\$(?:([a-z])(?:$|[^a-zA-Z]))\\$$/,\n      'one lowercase greek letter $': /^(?:\\$?[\\u03B1-\\u03C9]\\$?|\\$?\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\\s*\\$?)(?:\\s+|\\{\\}|(?![a-zA-Z]))$/,\n      'digits': /^[0-9]+/,\n      '-9.,9': /^[+\\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))/,\n      '-9.,9 no missing 0': /^[+\\-]?[0-9]+(?:[.,][0-9]+)?/,\n      '(-)(9.,9)(e)(99)': function e99(input) {\n        var m = input.match(/^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))?(\\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))\\))?(?:([eE]|\\s*(\\*|x|\\\\times|\\u00D7)\\s*10\\^)([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\}))?/);\n\n        if (m && m[0]) {\n          return {\n            match_: m.splice(1),\n            remainder: input.substr(m[0].length)\n          };\n        }\n\n        return null;\n      },\n      '(-)(9)^(-9)': function _(input) {\n        var m = input.match(/^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+)?)\\^([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\})/);\n\n        if (m && m[0]) {\n          return {\n            match_: m.splice(1),\n            remainder: input.substr(m[0].length)\n          };\n        }\n\n        return null;\n      },\n      'state of aggregation $': function stateOfAggregation$(input) {\n        // ... or crystal system\n        var a = mhchemParser.patterns.findObserveGroups(input, \"\", /^\\([a-z]{1,3}(?=[\\),])/, \")\", \"\"); // (aq), (aq,$\\infty$), (aq, sat)\n\n        if (a && a.remainder.match(/^($|[\\s,;\\)\\]\\}])/)) {\n          return a;\n        } //  AND end of 'phrase'\n\n\n        var m = input.match(/^(?:\\((?:\\\\ca\\s?)?\\$[amothc]\\$\\))/); // OR crystal system ($o$) (\\ca$c$)\n\n        if (m) {\n          return {\n            match_: m[0],\n            remainder: input.substr(m[0].length)\n          };\n        }\n\n        return null;\n      },\n      '_{(state of aggregation)}$': /^_\\{(\\([a-z]{1,3}\\))\\}/,\n      '{[(': /^(?:\\\\\\{|\\[|\\()/,\n      ')]}': /^(?:\\)|\\]|\\\\\\})/,\n      ', ': /^[,;]\\s*/,\n      ',': /^[,;]/,\n      '.': /^[.]/,\n      '. ': /^([.\\u22C5\\u00B7\\u2022])\\s*/,\n      '...': /^\\.\\.\\.(?=$|[^.])/,\n      '* ': /^([*])\\s*/,\n      '^{(...)}': function _(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^{\", \"\", \"\", \"}\");\n      },\n      '^($...$)': function $$(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^\", \"$\", \"$\", \"\");\n      },\n      '^a': /^\\^([0-9]+|[^\\\\_])/,\n      '^\\\\x{}{}': function x(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true);\n      },\n      '^\\\\x{}': function x(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\");\n      },\n      '^\\\\x': /^\\^(\\\\[a-zA-Z]+)\\s*/,\n      '^(-1)': /^\\^(-?\\d+)/,\n      '\\'': /^'/,\n      '_{(...)}': function _(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_{\", \"\", \"\", \"}\");\n      },\n      '_($...$)': function _$$(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_\", \"$\", \"$\", \"\");\n      },\n      '_9': /^_([+\\-]?[0-9]+|[^\\\\])/,\n      '_\\\\x{}{}': function _X(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true);\n      },\n      '_\\\\x{}': function _X(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\");\n      },\n      '_\\\\x': /^_(\\\\[a-zA-Z]+)\\s*/,\n      '^_': /^(?:\\^(?=_)|\\_(?=\\^)|[\\^_]$)/,\n      '{}': /^\\{\\}/,\n      '{...}': function _(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", \"{\", \"}\", \"\");\n      },\n      '{(...)}': function _(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"{\", \"\", \"\", \"}\");\n      },\n      '$...$': function $$(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\");\n      },\n      '${(...)}$': function $$(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"${\", \"\", \"\", \"}$\");\n      },\n      '$(...)$': function $$(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"$\", \"\", \"\", \"$\");\n      },\n      '=<>': /^[=<>]/,\n      '#': /^[#\\u2261]/,\n      '+': /^\\+/,\n      '-$': /^-(?=[\\s_},;\\]/]|$|\\([a-z]+\\))/,\n      // -space -, -; -] -/ -$ -state-of-aggregation\n      '-9': /^-(?=[0-9])/,\n      '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\\s,;\\)\\]\\}]))/,\n      '-': /^-/,\n      'pm-operator': /^(?:\\\\pm|\\$\\\\pm\\$|\\+-|\\+\\/-)/,\n      'operator': /^(?:\\+|(?:[\\-=<>]|<<|>>|\\\\approx|\\$\\\\approx\\$)(?=\\s|$|-?[0-9]))/,\n      'arrowUpDown': /^(?:v|\\(v\\)|\\^|\\(\\^\\))(?=$|[\\s,;\\)\\]\\}])/,\n      '\\\\bond{(...)}': function bond(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\bond{\", \"\", \"\", \"}\");\n      },\n      '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\\u2192\\u27F6\\u21CC])/,\n      'CMT': /^[CMT](?=\\[)/,\n      '[(...)]': function _(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"[\", \"\", \"\", \"]\");\n      },\n      '1st-level escape': /^(&|\\\\\\\\|\\\\hline)\\s*/,\n      '\\\\,': /^(?:\\\\[,\\ ;:])/,\n      // \\\\x - but output no space before\n      '\\\\x{}{}': function x(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true);\n      },\n      '\\\\x{}': function x(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\");\n      },\n      '\\\\ca': /^\\\\ca(?:\\s+|(?![a-zA-Z]))/,\n      '\\\\x': /^(?:\\\\[a-zA-Z]+\\s*|\\\\[_&{}%])/,\n      'orbital': /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,\n      // only those with numbers in front, because the others will be formatted correctly anyway\n      'others': /^[\\/~|]/,\n      '\\\\frac{(...)}': function frac(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\frac{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\overset{(...)}': function overset(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\overset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\underset{(...)}': function underset(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\underset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\underbrace{(...)}': function underbrace(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\underbrace{\", \"\", \"\", \"}_\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\color{(...)}0': function color0(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\");\n      },\n      '\\\\color{(...)}{(...)}1': function color1(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\color(...){(...)}2': function color2(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\color\", \"\\\\\", \"\", /^(?=\\{)/, \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\ce{(...)}': function ce(input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\ce{\", \"\", \"\", \"}\");\n      },\n      'oxidation$': /^(?:[+-][IVX]+|\\\\pm\\s*0|\\$\\\\pm\\$\\s*0)$/,\n      'd-oxidation$': /^(?:[+-]?\\s?[IVX]+|\\\\pm\\s*0|\\$\\\\pm\\$\\s*0)$/,\n      // 0 could be oxidation or charge\n      'roman numeral': /^[IVX]+/,\n      '1/2$': /^[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+(?:\\$[a-z]\\$|[a-z])?$/,\n      'amount': function amount(input) {\n        var match; // e.g. 2, 0.5, 1/2, -2, n/2, +;  $a$ could be added later in parsing\n\n        match = input.match(/^(?:(?:(?:\\([+\\-]?[0-9]+\\/[0-9]+\\)|[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+|[+\\-]?[0-9]+[.,][0-9]+|[+\\-]?\\.[0-9]+|[+\\-]?[0-9]+)(?:[a-z](?=\\s*[A-Z]))?)|[+\\-]?[a-z](?=\\s*[A-Z])|\\+(?!\\s))/);\n\n        if (match) {\n          return {\n            match_: match[0],\n            remainder: input.substr(match[0].length)\n          };\n        }\n\n        var a = mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\");\n\n        if (a) {\n          // e.g. $2n-1$, $-$\n          match = a.match_.match(/^\\$(?:\\(?[+\\-]?(?:[0-9]*[a-z]?[+\\-])?[0-9]*[a-z](?:[+\\-][0-9]*[a-z]?)?\\)?|\\+|-)\\$$/);\n\n          if (match) {\n            return {\n              match_: match[0],\n              remainder: input.substr(match[0].length)\n            };\n          }\n        }\n\n        return null;\n      },\n      'amount2': function amount2(input) {\n        return this['amount'](input);\n      },\n      '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,\n      'formula$': function formula$(input) {\n        if (input.match(/^\\([a-z]+\\)$/)) {\n          return null;\n        } // state of aggregation = no formula\n\n\n        var match = input.match(/^(?:[a-z]|(?:[0-9\\ \\+\\-\\,\\.\\(\\)]+[a-z])+[0-9\\ \\+\\-\\,\\.\\(\\)]*|(?:[a-z][0-9\\ \\+\\-\\,\\.\\(\\)]+)+[a-z]?)$/);\n\n        if (match) {\n          return {\n            match_: match[0],\n            remainder: input.substr(match[0].length)\n          };\n        }\n\n        return null;\n      },\n      'uprightEntities': /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,\n      '/': /^\\s*(\\/)\\s*/,\n      '//': /^\\s*(\\/\\/)\\s*/,\n      '*': /^\\s*[*.]\\s*/\n    },\n    findObserveGroups: function findObserveGroups(input, begExcl, begIncl, endIncl, endExcl, beg2Excl, beg2Incl, end2Incl, end2Excl, combine) {\n      /** @type {{(input: string, pattern: string | RegExp): string | string[] | null;}} */\n      var _match = function _match(input, pattern) {\n        if (typeof pattern === \"string\") {\n          if (input.indexOf(pattern) !== 0) {\n            return null;\n          }\n\n          return pattern;\n        } else {\n          var match = input.match(pattern);\n\n          if (!match) {\n            return null;\n          }\n\n          return match[0];\n        }\n      };\n      /** @type {{(input: string, i: number, endChars: string | RegExp): {endMatchBegin: number, endMatchEnd: number} | null;}} */\n\n\n      var _findObserveGroups = function _findObserveGroups(input, i, endChars) {\n        var braces = 0;\n\n        while (i < input.length) {\n          var a = input.charAt(i);\n\n          var match = _match(input.substr(i), endChars);\n\n          if (match !== null && braces === 0) {\n            return {\n              endMatchBegin: i,\n              endMatchEnd: i + match.length\n            };\n          } else if (a === \"{\") {\n            braces++;\n          } else if (a === \"}\") {\n            if (braces === 0) {\n              throw [\"ExtraCloseMissingOpen\", \"Extra close brace or missing open brace\"];\n            } else {\n              braces--;\n            }\n          }\n\n          i++;\n        }\n\n        if (braces > 0) {\n          return null;\n        }\n\n        return null;\n      };\n\n      var match = _match(input, begExcl);\n\n      if (match === null) {\n        return null;\n      }\n\n      input = input.substr(match.length);\n      match = _match(input, begIncl);\n\n      if (match === null) {\n        return null;\n      }\n\n      var e = _findObserveGroups(input, match.length, endIncl || endExcl);\n\n      if (e === null) {\n        return null;\n      }\n\n      var match1 = input.substring(0, endIncl ? e.endMatchEnd : e.endMatchBegin);\n\n      if (!(beg2Excl || beg2Incl)) {\n        return {\n          match_: match1,\n          remainder: input.substr(e.endMatchEnd)\n        };\n      } else {\n        var group2 = this.findObserveGroups(input.substr(e.endMatchEnd), beg2Excl, beg2Incl, end2Incl, end2Excl);\n\n        if (group2 === null) {\n          return null;\n        }\n        /** @type {string[]} */\n\n\n        var matchRet = [match1, group2.match_];\n        return {\n          match_: combine ? matchRet.join(\"\") : matchRet,\n          remainder: group2.remainder\n        };\n      }\n    },\n    //\n    // Matching function\n    // e.g. match(\"a\", input) will look for the regexp called \"a\" and see if it matches\n    // returns null or {match_:\"a\", remainder:\"bc\"}\n    //\n    match_: function match_(m, input) {\n      var pattern = mhchemParser.patterns.patterns[m];\n\n      if (pattern === undefined) {\n        throw [\"MhchemBugP\", \"mhchem bug P. Please report. (\" + m + \")\"]; // Trying to use non-existing pattern\n      } else if (typeof pattern === \"function\") {\n        return mhchemParser.patterns.patterns[m](input); // cannot use cached var pattern here, because some pattern functions need this===mhchemParser\n      } else {\n        // RegExp\n        var match = input.match(pattern);\n\n        if (match) {\n          var mm;\n\n          if (match[2]) {\n            mm = [match[1], match[2]];\n          } else if (match[1]) {\n            mm = match[1];\n          } else {\n            mm = match[0];\n          }\n\n          return {\n            match_: mm,\n            remainder: input.substr(match[0].length)\n          };\n        }\n\n        return null;\n      }\n    }\n  },\n  //\n  // Generic state machine actions\n  //\n  actions: {\n    'a=': function a(buffer, m) {\n      buffer.a = (buffer.a || \"\") + m;\n    },\n    'b=': function b(buffer, m) {\n      buffer.b = (buffer.b || \"\") + m;\n    },\n    'p=': function p(buffer, m) {\n      buffer.p = (buffer.p || \"\") + m;\n    },\n    'o=': function o(buffer, m) {\n      buffer.o = (buffer.o || \"\") + m;\n    },\n    'q=': function q(buffer, m) {\n      buffer.q = (buffer.q || \"\") + m;\n    },\n    'd=': function d(buffer, m) {\n      buffer.d = (buffer.d || \"\") + m;\n    },\n    'rm=': function rm(buffer, m) {\n      buffer.rm = (buffer.rm || \"\") + m;\n    },\n    'text=': function text(buffer, m) {\n      buffer.text_ = (buffer.text_ || \"\") + m;\n    },\n    'insert': function insert(buffer, m, a) {\n      return {\n        type_: a\n      };\n    },\n    'insert+p1': function insertP1(buffer, m, a) {\n      return {\n        type_: a,\n        p1: m\n      };\n    },\n    'insert+p1+p2': function insertP1P2(buffer, m, a) {\n      return {\n        type_: a,\n        p1: m[0],\n        p2: m[1]\n      };\n    },\n    'copy': function copy(buffer, m) {\n      return m;\n    },\n    'rm': function rm(buffer, m) {\n      return {\n        type_: 'rm',\n        p1: m || \"\"\n      };\n    },\n    'text': function text(buffer, m) {\n      return mhchemParser.go(m, 'text');\n    },\n    '{text}': function text(buffer, m) {\n      var ret = [\"{\"];\n      mhchemParser.concatArray(ret, mhchemParser.go(m, 'text'));\n      ret.push(\"}\");\n      return ret;\n    },\n    'tex-math': function texMath(buffer, m) {\n      return mhchemParser.go(m, 'tex-math');\n    },\n    'tex-math tight': function texMathTight(buffer, m) {\n      return mhchemParser.go(m, 'tex-math tight');\n    },\n    'bond': function bond(buffer, m, k) {\n      return {\n        type_: 'bond',\n        kind_: k || m\n      };\n    },\n    'color0-output': function color0Output(buffer, m) {\n      return {\n        type_: 'color0',\n        color: m[0]\n      };\n    },\n    'ce': function ce(buffer, m) {\n      return mhchemParser.go(m);\n    },\n    '1/2': function _(buffer, m) {\n      /** @type {ParserOutput[]} */\n      var ret = [];\n\n      if (m.match(/^[+\\-]/)) {\n        ret.push(m.substr(0, 1));\n        m = m.substr(1);\n      }\n\n      var n = m.match(/^([0-9]+|\\$[a-z]\\$|[a-z])\\/([0-9]+)(\\$[a-z]\\$|[a-z])?$/);\n      n[1] = n[1].replace(/\\$/g, \"\");\n      ret.push({\n        type_: 'frac',\n        p1: n[1],\n        p2: n[2]\n      });\n\n      if (n[3]) {\n        n[3] = n[3].replace(/\\$/g, \"\");\n        ret.push({\n          type_: 'tex-math',\n          p1: n[3]\n        });\n      }\n\n      return ret;\n    },\n    '9,9': function _(buffer, m) {\n      return mhchemParser.go(m, '9,9');\n    }\n  },\n  //\n  // createTransitions\n  // convert  { 'letter': { 'state': { action_: 'output' } } }  to  { 'state' => [ { pattern: 'letter', task: { action_: [{type_: 'output'}] } } ] }\n  // with expansion of 'a|b' to 'a' and 'b' (at 2 places)\n  //\n  createTransitions: function createTransitions(o) {\n    var pattern, state;\n    /** @type {string[]} */\n\n    var stateArray;\n    var i; //\n    // 1. Collect all states\n    //\n\n    /** @type {Transitions} */\n\n    var transitions = {};\n\n    for (pattern in o) {\n      for (state in o[pattern]) {\n        stateArray = state.split(\"|\");\n        o[pattern][state].stateArray = stateArray;\n\n        for (i = 0; i < stateArray.length; i++) {\n          transitions[stateArray[i]] = [];\n        }\n      }\n    } //\n    // 2. Fill states\n    //\n\n\n    for (pattern in o) {\n      for (state in o[pattern]) {\n        stateArray = o[pattern][state].stateArray || [];\n\n        for (i = 0; i < stateArray.length; i++) {\n          //\n          // 2a. Normalize actions into array:  'text=' ==> [{type_:'text='}]\n          // (Note to myself: Resolving the function here would be problematic. It would need .bind (for *this*) and currying (for *option*).)\n          //\n\n          /** @type {any} */\n          var p = o[pattern][state];\n\n          if (p.action_) {\n            p.action_ = [].concat(p.action_);\n\n            for (var k = 0; k < p.action_.length; k++) {\n              if (typeof p.action_[k] === \"string\") {\n                p.action_[k] = {\n                  type_: p.action_[k]\n                };\n              }\n            }\n          } else {\n            p.action_ = [];\n          } //\n          // 2.b Multi-insert\n          //\n\n\n          var patternArray = pattern.split(\"|\");\n\n          for (var j = 0; j < patternArray.length; j++) {\n            if (stateArray[i] === '*') {\n              // insert into all\n              for (var t in transitions) {\n                transitions[t].push({\n                  pattern: patternArray[j],\n                  task: p\n                });\n              }\n            } else {\n              transitions[stateArray[i]].push({\n                pattern: patternArray[j],\n                task: p\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return transitions;\n  },\n  stateMachines: {}\n}; //\n// Definition of state machines\n//\n\nmhchemParser.stateMachines = {\n  //\n  // \\ce state machines\n  //\n  //#region ce\n  'ce': {\n    // main parser\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      'else': {\n        '0|1|2': {\n          action_: 'beginsWithBond=false',\n          revisit: true,\n          toContinue: true\n        }\n      },\n      'oxidation$': {\n        '0': {\n          action_: 'oxidation-output'\n        }\n      },\n      'CMT': {\n        'r': {\n          action_: 'rdt=',\n          nextState: 'rt'\n        },\n        'rd': {\n          action_: 'rqt=',\n          nextState: 'rdt'\n        }\n      },\n      'arrowUpDown': {\n        '0|1|2|as': {\n          action_: ['sb=false', 'output', 'operator'],\n          nextState: '1'\n        }\n      },\n      'uprightEntities': {\n        '0|1|2': {\n          action_: ['o=', 'output'],\n          nextState: '1'\n        }\n      },\n      'orbital': {\n        '0|1|2|3': {\n          action_: 'o=',\n          nextState: 'o'\n        }\n      },\n      '->': {\n        '0|1|2|3': {\n          action_: 'r=',\n          nextState: 'r'\n        },\n        'a|as': {\n          action_: ['output', 'r='],\n          nextState: 'r'\n        },\n        '*': {\n          action_: ['output', 'r='],\n          nextState: 'r'\n        }\n      },\n      '+': {\n        'o': {\n          action_: 'd= kv',\n          nextState: 'd'\n        },\n        'd|D': {\n          action_: 'd=',\n          nextState: 'd'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'qd|qD': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'dq': {\n          action_: ['output', 'd='],\n          nextState: 'd'\n        },\n        '3': {\n          action_: ['sb=false', 'output', 'operator'],\n          nextState: '0'\n        }\n      },\n      'amount': {\n        '0|2': {\n          action_: 'a=',\n          nextState: 'a'\n        }\n      },\n      'pm-operator': {\n        '0|1|2|a|as': {\n          action_: ['sb=false', 'output', {\n            type_: 'operator',\n            option: '\\\\pm'\n          }],\n          nextState: '0'\n        }\n      },\n      'operator': {\n        '0|1|2|a|as': {\n          action_: ['sb=false', 'output', 'operator'],\n          nextState: '0'\n        }\n      },\n      '-$': {\n        'o|q': {\n          action_: ['charge or bond', 'output'],\n          nextState: 'qd'\n        },\n        'd': {\n          action_: 'd=',\n          nextState: 'd'\n        },\n        'D': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'qd': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'qD|dq': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        }\n      },\n      '-9': {\n        '3|o': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '3'\n        }\n      },\n      '- orbital overlap': {\n        'o': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '2'\n        },\n        'd': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '2'\n        }\n      },\n      '-': {\n        '0|1|2': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'beginsWithBond=true', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        },\n        '3': {\n          action_: {\n            type_: 'bond',\n            option: \"-\"\n          }\n        },\n        'a': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '2'\n        },\n        'as': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        },\n        'b': {\n          action_: 'b='\n        },\n        'o': {\n          action_: {\n            type_: '- after o/d',\n            option: false\n          },\n          nextState: '2'\n        },\n        'q': {\n          action_: {\n            type_: '- after o/d',\n            option: false\n          },\n          nextState: '2'\n        },\n        'd|qd|dq': {\n          action_: {\n            type_: '- after o/d',\n            option: true\n          },\n          nextState: '2'\n        },\n        'D|qD|p': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        }\n      },\n      'amount2': {\n        '1|3': {\n          action_: 'a=',\n          nextState: 'a'\n        }\n      },\n      'letters': {\n        '0|1|2|3|a|as|b|p|bp|o': {\n          action_: 'o=',\n          nextState: 'o'\n        },\n        'q|dq': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        },\n        'd|D|qd|qD': {\n          action_: 'o after d',\n          nextState: 'o'\n        }\n      },\n      'digits': {\n        'o': {\n          action_: 'q=',\n          nextState: 'q'\n        },\n        'd|D': {\n          action_: 'q=',\n          nextState: 'dq'\n        },\n        'q': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        },\n        'a': {\n          action_: 'o=',\n          nextState: 'o'\n        }\n      },\n      'space A': {\n        'b|p|bp': {}\n      },\n      'space': {\n        'a': {\n          nextState: 'as'\n        },\n        '0': {\n          action_: 'sb=false'\n        },\n        '1|2': {\n          action_: 'sb=true'\n        },\n        'r|rt|rd|rdt|rdq': {\n          action_: 'output',\n          nextState: '0'\n        },\n        '*': {\n          action_: ['output', 'sb=true'],\n          nextState: '1'\n        }\n      },\n      '1st-level escape': {\n        '1|2': {\n          action_: ['output', {\n            type_: 'insert+p1',\n            option: '1st-level escape'\n          }]\n        },\n        '*': {\n          action_: ['output', {\n            type_: 'insert+p1',\n            option: '1st-level escape'\n          }],\n          nextState: '0'\n        }\n      },\n      '[(...)]': {\n        'r|rt': {\n          action_: 'rd=',\n          nextState: 'rd'\n        },\n        'rd|rdt': {\n          action_: 'rq=',\n          nextState: 'rdq'\n        }\n      },\n      '...': {\n        'o|d|D|dq|qd|qD': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"...\"\n          }],\n          nextState: '3'\n        },\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, {\n            type_: 'insert',\n            option: 'ellipsis'\n          }],\n          nextState: '1'\n        }\n      },\n      '. |* ': {\n        '*': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'addition compound'\n          }],\n          nextState: '1'\n        }\n      },\n      'state of aggregation $': {\n        '*': {\n          action_: ['output', 'state of aggregation'],\n          nextState: '1'\n        }\n      },\n      '{[(': {\n        'a|as|o': {\n          action_: ['o=', 'output', 'parenthesisLevel++'],\n          nextState: '2'\n        },\n        '0|1|2|3': {\n          action_: ['o=', 'output', 'parenthesisLevel++'],\n          nextState: '2'\n        },\n        '*': {\n          action_: ['output', 'o=', 'output', 'parenthesisLevel++'],\n          nextState: '2'\n        }\n      },\n      ')]}': {\n        '0|1|2|3|b|p|bp|o': {\n          action_: ['o=', 'parenthesisLevel--'],\n          nextState: 'o'\n        },\n        'a|as|d|D|q|qd|qD|dq': {\n          action_: ['output', 'o=', 'parenthesisLevel--'],\n          nextState: 'o'\n        }\n      },\n      ', ': {\n        '*': {\n          action_: ['output', 'comma'],\n          nextState: '0'\n        }\n      },\n      '^_': {\n        // ^ and _ without a sensible argument\n        '*': {}\n      },\n      '^{(...)}|^($...$)': {\n        '0|1|2|as': {\n          action_: 'b=',\n          nextState: 'b'\n        },\n        'p': {\n          action_: 'b=',\n          nextState: 'bp'\n        },\n        '3|o': {\n          action_: 'd= kv',\n          nextState: 'D'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qD'\n        },\n        'd|D|qd|qD|dq': {\n          action_: ['output', 'd='],\n          nextState: 'D'\n        }\n      },\n      '^a|^\\\\x{}{}|^\\\\x{}|^\\\\x|\\'': {\n        '0|1|2|as': {\n          action_: 'b=',\n          nextState: 'b'\n        },\n        'p': {\n          action_: 'b=',\n          nextState: 'bp'\n        },\n        '3|o': {\n          action_: 'd= kv',\n          nextState: 'd'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'd|qd|D|qD': {\n          action_: 'd='\n        },\n        'dq': {\n          action_: ['output', 'd='],\n          nextState: 'd'\n        }\n      },\n      '_{(state of aggregation)}$': {\n        'd|D|q|qd|qD|dq': {\n          action_: ['output', 'q='],\n          nextState: 'q'\n        }\n      },\n      '_{(...)}|_($...$)|_9|_\\\\x{}{}|_\\\\x{}|_\\\\x': {\n        '0|1|2|as': {\n          action_: 'p=',\n          nextState: 'p'\n        },\n        'b': {\n          action_: 'p=',\n          nextState: 'bp'\n        },\n        '3|o': {\n          action_: 'q=',\n          nextState: 'q'\n        },\n        'd|D': {\n          action_: 'q=',\n          nextState: 'dq'\n        },\n        'q|qd|qD|dq': {\n          action_: ['output', 'q='],\n          nextState: 'q'\n        }\n      },\n      '=<>': {\n        '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'bond'],\n          nextState: '3'\n        }\n      },\n      '#': {\n        '0|1|2|3|a|as|o': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, {\n            type_: 'bond',\n            option: \"#\"\n          }],\n          nextState: '3'\n        }\n      },\n      '{}': {\n        '*': {\n          action_: {\n            type_: 'output',\n            option: 1\n          },\n          nextState: '1'\n        }\n      },\n      '{...}': {\n        '0|1|2|3|a|as|b|p|bp': {\n          action_: 'o=',\n          nextState: 'o'\n        },\n        'o|d|D|q|qd|qD|dq': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        }\n      },\n      '$...$': {\n        'a': {\n          action_: 'a='\n        },\n        // 2$n$\n        '0|1|2|3|as|b|p|bp|o': {\n          action_: 'o=',\n          nextState: 'o'\n        },\n        // not 'amount'\n        'as|o': {\n          action_: 'o='\n        },\n        'q|d|D|qd|qD|dq': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        }\n      },\n      '\\\\bond{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'bond'],\n          nextState: \"3\"\n        }\n      },\n      '\\\\frac{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'frac-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\overset{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'overset-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\underset{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'underset-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\underbrace{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'underbrace-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'color-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\color{(...)}0': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'color0-output']\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'ce'],\n          nextState: '3'\n        }\n      },\n      '\\\\,': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'copy'],\n          nextState: '1'\n        }\n      },\n      '\\\\x{}{}|\\\\x{}|\\\\x': {\n        '0|1|2|3|a|as|b|p|bp|o|c0': {\n          action_: ['o=', 'output'],\n          nextState: '3'\n        },\n        '*': {\n          action_: ['output', 'o=', 'output'],\n          nextState: '3'\n        }\n      },\n      'others': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'copy'],\n          nextState: '3'\n        }\n      },\n      'else2': {\n        'a': {\n          action_: 'a to o',\n          nextState: 'o',\n          revisit: true\n        },\n        'as': {\n          action_: ['output', 'sb=true'],\n          nextState: '1',\n          revisit: true\n        },\n        'r|rt|rd|rdt|rdq': {\n          action_: ['output'],\n          nextState: '0',\n          revisit: true\n        },\n        '*': {\n          action_: ['output', 'copy'],\n          nextState: '3'\n        }\n      }\n    }),\n    actions: {\n      'o after d': function oAfterD(buffer, m) {\n        var ret;\n\n        if ((buffer.d || \"\").match(/^[0-9]+$/)) {\n          var tmp = buffer.d;\n          buffer.d = undefined;\n          ret = this['output'](buffer);\n          buffer.b = tmp;\n        } else {\n          ret = this['output'](buffer);\n        }\n\n        mhchemParser.actions['o='](buffer, m);\n        return ret;\n      },\n      'd= kv': function dKv(buffer, m) {\n        buffer.d = m;\n        buffer.dType = 'kv';\n      },\n      'charge or bond': function chargeOrBond(buffer, m) {\n        if (buffer['beginsWithBond']) {\n          /** @type {ParserOutput[]} */\n          var ret = [];\n          mhchemParser.concatArray(ret, this['output'](buffer));\n          mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, \"-\"));\n          return ret;\n        } else {\n          buffer.d = m;\n        }\n      },\n      '- after o/d': function afterOD(buffer, m, isAfterD) {\n        var c1 = mhchemParser.patterns.match_('orbital', buffer.o || \"\");\n        var c2 = mhchemParser.patterns.match_('one lowercase greek letter $', buffer.o || \"\");\n        var c3 = mhchemParser.patterns.match_('one lowercase latin letter $', buffer.o || \"\");\n        var c4 = mhchemParser.patterns.match_('$one lowercase latin letter$ $', buffer.o || \"\");\n        var hyphenFollows = m === \"-\" && (c1 && c1.remainder === \"\" || c2 || c3 || c4);\n\n        if (hyphenFollows && !buffer.a && !buffer.b && !buffer.p && !buffer.d && !buffer.q && !c1 && c3) {\n          buffer.o = '$' + buffer.o + '$';\n        }\n        /** @type {ParserOutput[]} */\n\n\n        var ret = [];\n\n        if (hyphenFollows) {\n          mhchemParser.concatArray(ret, this['output'](buffer));\n          ret.push({\n            type_: 'hyphen'\n          });\n        } else {\n          c1 = mhchemParser.patterns.match_('digits', buffer.d || \"\");\n\n          if (isAfterD && c1 && c1.remainder === '') {\n            mhchemParser.concatArray(ret, mhchemParser.actions['d='](buffer, m));\n            mhchemParser.concatArray(ret, this['output'](buffer));\n          } else {\n            mhchemParser.concatArray(ret, this['output'](buffer));\n            mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, \"-\"));\n          }\n        }\n\n        return ret;\n      },\n      'a to o': function aToO(buffer) {\n        buffer.o = buffer.a;\n        buffer.a = undefined;\n      },\n      'sb=true': function sbTrue(buffer) {\n        buffer.sb = true;\n      },\n      'sb=false': function sbFalse(buffer) {\n        buffer.sb = false;\n      },\n      'beginsWithBond=true': function beginsWithBondTrue(buffer) {\n        buffer['beginsWithBond'] = true;\n      },\n      'beginsWithBond=false': function beginsWithBondFalse(buffer) {\n        buffer['beginsWithBond'] = false;\n      },\n      'parenthesisLevel++': function parenthesisLevel(buffer) {\n        buffer['parenthesisLevel']++;\n      },\n      'parenthesisLevel--': function parenthesisLevel(buffer) {\n        buffer['parenthesisLevel']--;\n      },\n      'state of aggregation': function stateOfAggregation(buffer, m) {\n        return {\n          type_: 'state of aggregation',\n          p1: mhchemParser.go(m, 'o')\n        };\n      },\n      'comma': function comma(buffer, m) {\n        var a = m.replace(/\\s*$/, '');\n        var withSpace = a !== m;\n\n        if (withSpace && buffer['parenthesisLevel'] === 0) {\n          return {\n            type_: 'comma enumeration L',\n            p1: a\n          };\n        } else {\n          return {\n            type_: 'comma enumeration M',\n            p1: a\n          };\n        }\n      },\n      'output': function output(buffer, m, entityFollows) {\n        // entityFollows:\n        //   undefined = if we have nothing else to output, also ignore the just read space (buffer.sb)\n        //   1 = an entity follows, never omit the space if there was one just read before (can only apply to state 1)\n        //   2 = 1 + the entity can have an amount, so output a\\, instead of converting it to o (can only apply to states a|as)\n\n        /** @type {ParserOutput | ParserOutput[]} */\n        var ret;\n\n        if (!buffer.r) {\n          ret = [];\n\n          if (!buffer.a && !buffer.b && !buffer.p && !buffer.o && !buffer.q && !buffer.d && !entityFollows) ; else {\n            if (buffer.sb) {\n              ret.push({\n                type_: 'entitySkip'\n              });\n            }\n\n            if (!buffer.o && !buffer.q && !buffer.d && !buffer.b && !buffer.p && entityFollows !== 2) {\n              buffer.o = buffer.a;\n              buffer.a = undefined;\n            } else if (!buffer.o && !buffer.q && !buffer.d && (buffer.b || buffer.p)) {\n              buffer.o = buffer.a;\n              buffer.d = buffer.b;\n              buffer.q = buffer.p;\n              buffer.a = buffer.b = buffer.p = undefined;\n            } else {\n              if (buffer.o && buffer.dType === 'kv' && mhchemParser.patterns.match_('d-oxidation$', buffer.d || \"\")) {\n                buffer.dType = 'oxidation';\n              } else if (buffer.o && buffer.dType === 'kv' && !buffer.q) {\n                buffer.dType = undefined;\n              }\n            }\n\n            ret.push({\n              type_: 'chemfive',\n              a: mhchemParser.go(buffer.a, 'a'),\n              b: mhchemParser.go(buffer.b, 'bd'),\n              p: mhchemParser.go(buffer.p, 'pq'),\n              o: mhchemParser.go(buffer.o, 'o'),\n              q: mhchemParser.go(buffer.q, 'pq'),\n              d: mhchemParser.go(buffer.d, buffer.dType === 'oxidation' ? 'oxidation' : 'bd'),\n              dType: buffer.dType\n            });\n          }\n        } else {\n          // r\n\n          /** @type {ParserOutput[]} */\n          var rd;\n\n          if (buffer.rdt === 'M') {\n            rd = mhchemParser.go(buffer.rd, 'tex-math');\n          } else if (buffer.rdt === 'T') {\n            rd = [{\n              type_: 'text',\n              p1: buffer.rd || \"\"\n            }];\n          } else {\n            rd = mhchemParser.go(buffer.rd);\n          }\n          /** @type {ParserOutput[]} */\n\n\n          var rq;\n\n          if (buffer.rqt === 'M') {\n            rq = mhchemParser.go(buffer.rq, 'tex-math');\n          } else if (buffer.rqt === 'T') {\n            rq = [{\n              type_: 'text',\n              p1: buffer.rq || \"\"\n            }];\n          } else {\n            rq = mhchemParser.go(buffer.rq);\n          }\n\n          ret = {\n            type_: 'arrow',\n            r: buffer.r,\n            rd: rd,\n            rq: rq\n          };\n        }\n\n        for (var p in buffer) {\n          if (p !== 'parenthesisLevel' && p !== 'beginsWithBond') {\n            delete buffer[p];\n          }\n        }\n\n        return ret;\n      },\n      'oxidation-output': function oxidationOutput(buffer, m) {\n        var ret = [\"{\"];\n        mhchemParser.concatArray(ret, mhchemParser.go(m, 'oxidation'));\n        ret.push(\"}\");\n        return ret;\n      },\n      'frac-output': function fracOutput(buffer, m) {\n        return {\n          type_: 'frac-ce',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'overset-output': function oversetOutput(buffer, m) {\n        return {\n          type_: 'overset',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'underset-output': function undersetOutput(buffer, m) {\n        return {\n          type_: 'underset',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'underbrace-output': function underbraceOutput(buffer, m) {\n        return {\n          type_: 'underbrace',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'color-output': function colorOutput(buffer, m) {\n        return {\n          type_: 'color',\n          color1: m[0],\n          color2: mhchemParser.go(m[1])\n        };\n      },\n      'r=': function r(buffer, m) {\n        buffer.r = m;\n      },\n      'rdt=': function rdt(buffer, m) {\n        buffer.rdt = m;\n      },\n      'rd=': function rd(buffer, m) {\n        buffer.rd = m;\n      },\n      'rqt=': function rqt(buffer, m) {\n        buffer.rqt = m;\n      },\n      'rq=': function rq(buffer, m) {\n        buffer.rq = m;\n      },\n      'operator': function operator(buffer, m, p1) {\n        return {\n          type_: 'operator',\n          kind_: p1 || m\n        };\n      }\n    }\n  },\n  'a': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      '1/2$': {\n        '0': {\n          action_: '1/2'\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '1',\n          revisit: true\n        }\n      },\n      '$(...)$': {\n        '*': {\n          action_: 'tex-math tight',\n          nextState: '1'\n        }\n      },\n      ',': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'commaDecimal'\n          }\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {}\n  },\n  'o': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      '1/2$': {\n        '0': {\n          action_: '1/2'\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '1',\n          revisit: true\n        }\n      },\n      'letters': {\n        '*': {\n          action_: 'rm'\n        }\n      },\n      '\\\\ca': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'circa'\n          }\n        }\n      },\n      '\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'copy'\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '{(...)}': {\n        '*': {\n          action_: '{text}'\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {}\n  },\n  'text': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '{...}': {\n        '*': {\n          action_: 'text='\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '\\\\greek': {\n        '*': {\n          action_: ['output', 'rm']\n        }\n      },\n      '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: ['output', 'copy']\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'text='\n        }\n      }\n    }),\n    actions: {\n      'output': function output(buffer) {\n        if (buffer.text_) {\n          /** @type {ParserOutput} */\n          var ret = {\n            type_: 'text',\n            p1: buffer.text_\n          };\n\n          for (var p in buffer) {\n            delete buffer[p];\n          }\n\n          return ret;\n        }\n      }\n    }\n  },\n  'pq': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      'state of aggregation $': {\n        '*': {\n          action_: 'state of aggregation'\n        }\n      },\n      'i$': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      '(KV letters),': {\n        '0': {\n          action_: 'rm',\n          nextState: '0'\n        }\n      },\n      'formula$': {\n        '0': {\n          nextState: 'f',\n          revisit: true\n        }\n      },\n      '1/2$': {\n        '0': {\n          action_: '1/2'\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '{(...)}': {\n        '*': {\n          action_: 'text'\n        }\n      },\n      'a-z': {\n        'f': {\n          action_: 'tex-math'\n        }\n      },\n      'letters': {\n        '*': {\n          action_: 'rm'\n        }\n      },\n      '-9.,9': {\n        '*': {\n          action_: '9,9'\n        }\n      },\n      ',': {\n        '*': {\n          action_: {\n            type_: 'insert+p1',\n            option: 'comma enumeration S'\n          }\n        }\n      },\n      '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n        '*': {\n          action_: 'color-output'\n        }\n      },\n      '\\\\color{(...)}0': {\n        '*': {\n          action_: 'color0-output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: 'ce'\n        }\n      },\n      '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'copy'\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'state of aggregation': function stateOfAggregation(buffer, m) {\n        return {\n          type_: 'state of aggregation subscript',\n          p1: mhchemParser.go(m, 'o')\n        };\n      },\n      'color-output': function colorOutput(buffer, m) {\n        return {\n          type_: 'color',\n          color1: m[0],\n          color2: mhchemParser.go(m[1], 'pq')\n        };\n      }\n    }\n  },\n  'bd': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      'x$': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      'formula$': {\n        '0': {\n          nextState: 'f',\n          revisit: true\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      '-9.,9 no missing 0': {\n        '*': {\n          action_: '9,9'\n        }\n      },\n      '.': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'electron dot'\n          }\n        }\n      },\n      'a-z': {\n        'f': {\n          action_: 'tex-math'\n        }\n      },\n      'x': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'KV x'\n          }\n        }\n      },\n      'letters': {\n        '*': {\n          action_: 'rm'\n        }\n      },\n      '\\'': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'prime'\n          }\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '{(...)}': {\n        '*': {\n          action_: 'text'\n        }\n      },\n      '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n        '*': {\n          action_: 'color-output'\n        }\n      },\n      '\\\\color{(...)}0': {\n        '*': {\n          action_: 'color0-output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: 'ce'\n        }\n      },\n      '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'copy'\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'color-output': function colorOutput(buffer, m) {\n        return {\n          type_: 'color',\n          color1: m[0],\n          color2: mhchemParser.go(m[1], 'bd')\n        };\n      }\n    }\n  },\n  'oxidation': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      'roman numeral': {\n        '*': {\n          action_: 'roman-numeral'\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'roman-numeral': function romanNumeral(buffer, m) {\n        return {\n          type_: 'roman numeral',\n          p1: m || \"\"\n        };\n      }\n    }\n  },\n  'tex-math': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: ['output', 'ce']\n        }\n      },\n      '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'o='\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'o='\n        }\n      }\n    }),\n    actions: {\n      'output': function output(buffer) {\n        if (buffer.o) {\n          /** @type {ParserOutput} */\n          var ret = {\n            type_: 'tex-math',\n            p1: buffer.o\n          };\n\n          for (var p in buffer) {\n            delete buffer[p];\n          }\n\n          return ret;\n        }\n      }\n    }\n  },\n  'tex-math tight': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: ['output', 'ce']\n        }\n      },\n      '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'o='\n        }\n      },\n      '-|+': {\n        '*': {\n          action_: 'tight operator'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'o='\n        }\n      }\n    }),\n    actions: {\n      'tight operator': function tightOperator(buffer, m) {\n        buffer.o = (buffer.o || \"\") + \"{\" + m + \"}\";\n      },\n      'output': function output(buffer) {\n        if (buffer.o) {\n          /** @type {ParserOutput} */\n          var ret = {\n            type_: 'tex-math',\n            p1: buffer.o\n          };\n\n          for (var p in buffer) {\n            delete buffer[p];\n          }\n\n          return ret;\n        }\n      }\n    }\n  },\n  '9,9': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      ',': {\n        '*': {\n          action_: 'comma'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'comma': function comma() {\n        return {\n          type_: 'commaDecimal'\n        };\n      }\n    }\n  },\n  //#endregion\n  //\n  // \\pu state machines\n  //\n  //#region pu\n  'pu': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      'space$': {\n        '*': {\n          action_: ['output', 'space']\n        }\n      },\n      '{[(|)]}': {\n        '0|a': {\n          action_: 'copy'\n        }\n      },\n      '(-)(9)^(-9)': {\n        '0': {\n          action_: 'number^',\n          nextState: 'a'\n        }\n      },\n      '(-)(9.,9)(e)(99)': {\n        '0': {\n          action_: 'enumber',\n          nextState: 'a'\n        }\n      },\n      'space': {\n        '0|a': {}\n      },\n      'pm-operator': {\n        '0|a': {\n          action_: {\n            type_: 'operator',\n            option: '\\\\pm'\n          },\n          nextState: '0'\n        }\n      },\n      'operator': {\n        '0|a': {\n          action_: 'copy',\n          nextState: '0'\n        }\n      },\n      '//': {\n        'd': {\n          action_: 'o=',\n          nextState: '/'\n        }\n      },\n      '/': {\n        'd': {\n          action_: 'o=',\n          nextState: '/'\n        }\n      },\n      '{...}|else': {\n        '0|d': {\n          action_: 'd=',\n          nextState: 'd'\n        },\n        'a': {\n          action_: ['space', 'd='],\n          nextState: 'd'\n        },\n        '/|q': {\n          action_: 'q=',\n          nextState: 'q'\n        }\n      }\n    }),\n    actions: {\n      'enumber': function enumber(buffer, m) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n\n        if (m[0] === \"+-\" || m[0] === \"+/-\") {\n          ret.push(\"\\\\pm \");\n        } else if (m[0]) {\n          ret.push(m[0]);\n        }\n\n        if (m[1]) {\n          mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));\n\n          if (m[2]) {\n            if (m[2].match(/[,.]/)) {\n              mhchemParser.concatArray(ret, mhchemParser.go(m[2], 'pu-9,9'));\n            } else {\n              ret.push(m[2]);\n            }\n          }\n\n          m[3] = m[4] || m[3];\n\n          if (m[3]) {\n            m[3] = m[3].trim();\n\n            if (m[3] === \"e\" || m[3].substr(0, 1) === \"*\") {\n              ret.push({\n                type_: 'cdot'\n              });\n            } else {\n              ret.push({\n                type_: 'times'\n              });\n            }\n          }\n        }\n\n        if (m[3]) {\n          ret.push(\"10^{\" + m[5] + \"}\");\n        }\n\n        return ret;\n      },\n      'number^': function number(buffer, m) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n\n        if (m[0] === \"+-\" || m[0] === \"+/-\") {\n          ret.push(\"\\\\pm \");\n        } else if (m[0]) {\n          ret.push(m[0]);\n        }\n\n        mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));\n        ret.push(\"^{\" + m[2] + \"}\");\n        return ret;\n      },\n      'operator': function operator(buffer, m, p1) {\n        return {\n          type_: 'operator',\n          kind_: p1 || m\n        };\n      },\n      'space': function space() {\n        return {\n          type_: 'pu-space-1'\n        };\n      },\n      'output': function output(buffer) {\n        /** @type {ParserOutput | ParserOutput[]} */\n        var ret;\n        var md = mhchemParser.patterns.match_('{(...)}', buffer.d || \"\");\n\n        if (md && md.remainder === '') {\n          buffer.d = md.match_;\n        }\n\n        var mq = mhchemParser.patterns.match_('{(...)}', buffer.q || \"\");\n\n        if (mq && mq.remainder === '') {\n          buffer.q = mq.match_;\n        }\n\n        if (buffer.d) {\n          buffer.d = buffer.d.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n          buffer.d = buffer.d.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n        }\n\n        if (buffer.q) {\n          // fraction\n          buffer.q = buffer.q.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n          buffer.q = buffer.q.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n          var b5 = {\n            d: mhchemParser.go(buffer.d, 'pu'),\n            q: mhchemParser.go(buffer.q, 'pu')\n          };\n\n          if (buffer.o === '//') {\n            ret = {\n              type_: 'pu-frac',\n              p1: b5.d,\n              p2: b5.q\n            };\n          } else {\n            ret = b5.d;\n\n            if (b5.d.length > 1 || b5.q.length > 1) {\n              ret.push({\n                type_: ' / '\n              });\n            } else {\n              ret.push({\n                type_: '/'\n              });\n            }\n\n            mhchemParser.concatArray(ret, b5.q);\n          }\n        } else {\n          // no fraction\n          ret = mhchemParser.go(buffer.d, 'pu-2');\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      }\n    }\n  },\n  'pu-2': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '*': {\n        '*': {\n          action_: ['output', 'cdot'],\n          nextState: '0'\n        }\n      },\n      '\\\\x': {\n        '*': {\n          action_: 'rm='\n        }\n      },\n      'space': {\n        '*': {\n          action_: ['output', 'space'],\n          nextState: '0'\n        }\n      },\n      '^{(...)}|^(-1)': {\n        '1': {\n          action_: '^(-1)'\n        }\n      },\n      '-9.,9': {\n        '0': {\n          action_: 'rm=',\n          nextState: '0'\n        },\n        '1': {\n          action_: '^(-1)',\n          nextState: '0'\n        }\n      },\n      '{...}|else': {\n        '*': {\n          action_: 'rm=',\n          nextState: '1'\n        }\n      }\n    }),\n    actions: {\n      'cdot': function cdot() {\n        return {\n          type_: 'tight cdot'\n        };\n      },\n      '^(-1)': function _(buffer, m) {\n        buffer.rm += \"^{\" + m + \"}\";\n      },\n      'space': function space() {\n        return {\n          type_: 'pu-space-2'\n        };\n      },\n      'output': function output(buffer) {\n        /** @type {ParserOutput | ParserOutput[]} */\n        var ret = [];\n\n        if (buffer.rm) {\n          var mrm = mhchemParser.patterns.match_('{(...)}', buffer.rm || \"\");\n\n          if (mrm && mrm.remainder === '') {\n            ret = mhchemParser.go(mrm.match_, 'pu');\n          } else {\n            ret = {\n              type_: 'rm',\n              p1: buffer.rm\n            };\n          }\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      }\n    }\n  },\n  'pu-9,9': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '0': {\n          action_: 'output-0'\n        },\n        'o': {\n          action_: 'output-o'\n        }\n      },\n      ',': {\n        '0': {\n          action_: ['output-0', 'comma'],\n          nextState: 'o'\n        }\n      },\n      '.': {\n        '0': {\n          action_: ['output-0', 'copy'],\n          nextState: 'o'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'text='\n        }\n      }\n    }),\n    actions: {\n      'comma': function comma() {\n        return {\n          type_: 'commaDecimal'\n        };\n      },\n      'output-0': function output0(buffer) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n        buffer.text_ = buffer.text_ || \"\";\n\n        if (buffer.text_.length > 4) {\n          var a = buffer.text_.length % 3;\n\n          if (a === 0) {\n            a = 3;\n          }\n\n          for (var i = buffer.text_.length - 3; i > 0; i -= 3) {\n            ret.push(buffer.text_.substr(i, 3));\n            ret.push({\n              type_: '1000 separator'\n            });\n          }\n\n          ret.push(buffer.text_.substr(0, a));\n          ret.reverse();\n        } else {\n          ret.push(buffer.text_);\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      },\n      'output-o': function outputO(buffer) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n        buffer.text_ = buffer.text_ || \"\";\n\n        if (buffer.text_.length > 4) {\n          var a = buffer.text_.length - 3;\n\n          for (var i = 0; i < a; i += 3) {\n            ret.push(buffer.text_.substr(i, 3));\n            ret.push({\n              type_: '1000 separator'\n            });\n          }\n\n          ret.push(buffer.text_.substr(i));\n        } else {\n          ret.push(buffer.text_);\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      }\n    }\n  } //#endregion\n\n}; //\n// texify: Take MhchemParser output and convert it to TeX\n//\n\n/** @type {Texify} */\n\nvar texify = {\n  go: function go(input, isInner) {\n    // (recursive, max 4 levels)\n    if (!input) {\n      return \"\";\n    }\n\n    var res = \"\";\n    var cee = false;\n\n    for (var i = 0; i < input.length; i++) {\n      var inputi = input[i];\n\n      if (typeof inputi === \"string\") {\n        res += inputi;\n      } else {\n        res += texify._go2(inputi);\n\n        if (inputi.type_ === '1st-level escape') {\n          cee = true;\n        }\n      }\n    }\n\n    if (!isInner && !cee && res) {\n      res = \"{\" + res + \"}\";\n    }\n\n    return res;\n  },\n  _goInner: function _goInner(input) {\n    if (!input) {\n      return input;\n    }\n\n    return texify.go(input, true);\n  },\n  _go2: function _go2(buf) {\n    /** @type {undefined | string} */\n    var res;\n\n    switch (buf.type_) {\n      case 'chemfive':\n        res = \"\";\n        var b5 = {\n          a: texify._goInner(buf.a),\n          b: texify._goInner(buf.b),\n          p: texify._goInner(buf.p),\n          o: texify._goInner(buf.o),\n          q: texify._goInner(buf.q),\n          d: texify._goInner(buf.d)\n        }; //\n        // a\n        //\n\n        if (b5.a) {\n          if (b5.a.match(/^[+\\-]/)) {\n            b5.a = \"{\" + b5.a + \"}\";\n          }\n\n          res += b5.a + \"\\\\,\";\n        } //\n        // b and p\n        //\n\n\n        if (b5.b || b5.p) {\n          res += \"{\\\\vphantom{X}}\";\n          res += \"^{\\\\hphantom{\" + (b5.b || \"\") + \"}}_{\\\\hphantom{\" + (b5.p || \"\") + \"}}\";\n          res += \"{\\\\vphantom{X}}\";\n          res += \"^{\\\\smash[t]{\\\\vphantom{2}}\\\\mathllap{\" + (b5.b || \"\") + \"}}\";\n          res += \"_{\\\\vphantom{2}\\\\mathllap{\\\\smash[t]{\" + (b5.p || \"\") + \"}}}\";\n        } //\n        // o\n        //\n\n\n        if (b5.o) {\n          if (b5.o.match(/^[+\\-]/)) {\n            b5.o = \"{\" + b5.o + \"}\";\n          }\n\n          res += b5.o;\n        } //\n        // q and d\n        //\n\n\n        if (buf.dType === 'kv') {\n          if (b5.d || b5.q) {\n            res += \"{\\\\vphantom{X}}\";\n          }\n\n          if (b5.d) {\n            res += \"^{\" + b5.d + \"}\";\n          }\n\n          if (b5.q) {\n            res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n          }\n        } else if (buf.dType === 'oxidation') {\n          if (b5.d) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"^{\" + b5.d + \"}\";\n          }\n\n          if (b5.q) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n          }\n        } else {\n          if (b5.q) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n          }\n\n          if (b5.d) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"^{\" + b5.d + \"}\";\n          }\n        }\n\n        break;\n\n      case 'rm':\n        res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n        break;\n\n      case 'text':\n        if (buf.p1.match(/[\\^_]/)) {\n          buf.p1 = buf.p1.replace(\" \", \"~\").replace(\"-\", \"\\\\text{-}\");\n          res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n        } else {\n          res = \"\\\\text{\" + buf.p1 + \"}\";\n        }\n\n        break;\n\n      case 'roman numeral':\n        res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n        break;\n\n      case 'state of aggregation':\n        res = \"\\\\mskip2mu \" + texify._goInner(buf.p1);\n        break;\n\n      case 'state of aggregation subscript':\n        res = \"\\\\mskip1mu \" + texify._goInner(buf.p1);\n        break;\n\n      case 'bond':\n        res = texify._getBond(buf.kind_);\n\n        if (!res) {\n          throw [\"MhchemErrorBond\", \"mhchem Error. Unknown bond type (\" + buf.kind_ + \")\"];\n        }\n\n        break;\n\n      case 'frac':\n        var c = \"\\\\frac{\" + buf.p1 + \"}{\" + buf.p2 + \"}\";\n        res = \"\\\\mathchoice{\\\\textstyle\" + c + \"}{\" + c + \"}{\" + c + \"}{\" + c + \"}\";\n        break;\n\n      case 'pu-frac':\n        var d = \"\\\\frac{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        res = \"\\\\mathchoice{\\\\textstyle\" + d + \"}{\" + d + \"}{\" + d + \"}{\" + d + \"}\";\n        break;\n\n      case 'tex-math':\n        res = buf.p1 + \" \";\n        break;\n\n      case 'frac-ce':\n        res = \"\\\\frac{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'overset':\n        res = \"\\\\overset{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'underset':\n        res = \"\\\\underset{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'underbrace':\n        res = \"\\\\underbrace{\" + texify._goInner(buf.p1) + \"}_{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'color':\n        res = \"{\\\\color{\" + buf.color1 + \"}{\" + texify._goInner(buf.color2) + \"}}\";\n        break;\n\n      case 'color0':\n        res = \"\\\\color{\" + buf.color + \"}\";\n        break;\n\n      case 'arrow':\n        var b6 = {\n          rd: texify._goInner(buf.rd),\n          rq: texify._goInner(buf.rq)\n        };\n\n        var arrow = \"\\\\x\" + texify._getArrow(buf.r);\n\n        if (b6.rq) {\n          arrow += \"[{\" + b6.rq + \"}]\";\n        }\n\n        if (b6.rd) {\n          arrow += \"{\" + b6.rd + \"}\";\n        } else {\n          arrow += \"{}\";\n        }\n\n        res = arrow;\n        break;\n\n      case 'operator':\n        res = texify._getOperator(buf.kind_);\n        break;\n\n      case '1st-level escape':\n        res = buf.p1 + \" \"; // &, \\\\\\\\, \\\\hlin\n\n        break;\n\n      case 'space':\n        res = \" \";\n        break;\n\n      case 'entitySkip':\n        res = \"~\";\n        break;\n\n      case 'pu-space-1':\n        res = \"~\";\n        break;\n\n      case 'pu-space-2':\n        res = \"\\\\mkern3mu \";\n        break;\n\n      case '1000 separator':\n        res = \"\\\\mkern2mu \";\n        break;\n\n      case 'commaDecimal':\n        res = \"{,}\";\n        break;\n\n      case 'comma enumeration L':\n        res = \"{\" + buf.p1 + \"}\\\\mkern6mu \";\n        break;\n\n      case 'comma enumeration M':\n        res = \"{\" + buf.p1 + \"}\\\\mkern3mu \";\n        break;\n\n      case 'comma enumeration S':\n        res = \"{\" + buf.p1 + \"}\\\\mkern1mu \";\n        break;\n\n      case 'hyphen':\n        res = \"\\\\text{-}\";\n        break;\n\n      case 'addition compound':\n        res = \"\\\\,{\\\\cdot}\\\\,\";\n        break;\n\n      case 'electron dot':\n        res = \"\\\\mkern1mu \\\\bullet\\\\mkern1mu \";\n        break;\n\n      case 'KV x':\n        res = \"{\\\\times}\";\n        break;\n\n      case 'prime':\n        res = \"\\\\prime \";\n        break;\n\n      case 'cdot':\n        res = \"\\\\cdot \";\n        break;\n\n      case 'tight cdot':\n        res = \"\\\\mkern1mu{\\\\cdot}\\\\mkern1mu \";\n        break;\n\n      case 'times':\n        res = \"\\\\times \";\n        break;\n\n      case 'circa':\n        res = \"{\\\\sim}\";\n        break;\n\n      case '^':\n        res = \"uparrow\";\n        break;\n\n      case 'v':\n        res = \"downarrow\";\n        break;\n\n      case 'ellipsis':\n        res = \"\\\\ldots \";\n        break;\n\n      case '/':\n        res = \"/\";\n        break;\n\n      case ' / ':\n        res = \"\\\\,/\\\\,\";\n        break;\n\n      default:\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n      // Missing texify rule or unknown MhchemParser output\n    }\n    return res;\n  },\n  _getArrow: function _getArrow(a) {\n    switch (a) {\n      case \"->\":\n        return \"rightarrow\";\n\n      case \"\\u2192\":\n        return \"rightarrow\";\n\n      case \"\\u27F6\":\n        return \"rightarrow\";\n\n      case \"<-\":\n        return \"leftarrow\";\n\n      case \"<->\":\n        return \"leftrightarrow\";\n\n      case \"<-->\":\n        return \"rightleftarrows\";\n\n      case \"<=>\":\n        return \"rightleftharpoons\";\n\n      case \"\\u21CC\":\n        return \"rightleftharpoons\";\n\n      case \"<=>>\":\n        return \"rightequilibrium\";\n\n      case \"<<=>\":\n        return \"leftequilibrium\";\n\n      default:\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n    }\n  },\n  _getBond: function _getBond(a) {\n    switch (a) {\n      case \"-\":\n        return \"{-}\";\n\n      case \"1\":\n        return \"{-}\";\n\n      case \"=\":\n        return \"{=}\";\n\n      case \"2\":\n        return \"{=}\";\n\n      case \"#\":\n        return \"{\\\\equiv}\";\n\n      case \"3\":\n        return \"{\\\\equiv}\";\n\n      case \"~\":\n        return \"{\\\\tripledash}\";\n\n      case \"~-\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.1em}{$-$}}\\\\raisebox{.1em}{$\\\\tripledash$}}\";\n\n      case \"~=\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$\\\\tripledash$}}-}\";\n\n      case \"~--\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$\\\\tripledash$}}-}\";\n\n      case \"-~-\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$-$}}\\\\tripledash}\";\n\n      case \"...\":\n        return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n\n      case \"....\":\n        return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n\n      case \"->\":\n        return \"{\\\\rightarrow}\";\n\n      case \"<-\":\n        return \"{\\\\leftarrow}\";\n\n      case \"<\":\n        return \"{<}\";\n\n      case \">\":\n        return \"{>}\";\n\n      default:\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n    }\n  },\n  _getOperator: function _getOperator(a) {\n    switch (a) {\n      case \"+\":\n        return \" {}+{} \";\n\n      case \"-\":\n        return \" {}-{} \";\n\n      case \"=\":\n        return \" {}={} \";\n\n      case \"<\":\n        return \" {}<{} \";\n\n      case \">\":\n        return \" {}>{} \";\n\n      case \"<<\":\n        return \" {}\\\\ll{} \";\n\n      case \">>\":\n        return \" {}\\\\gg{} \";\n\n      case \"\\\\pm\":\n        return \" {}\\\\pm{} \";\n\n      case \"\\\\approx\":\n        return \" {}\\\\approx{} \";\n\n      case \"$\\\\approx$\":\n        return \" {}\\\\approx{} \";\n\n      case \"v\":\n        return \" \\\\downarrow{} \";\n\n      case \"(v)\":\n        return \" \\\\downarrow{} \";\n\n      case \"^\":\n        return \" \\\\uparrow{} \";\n\n      case \"(^)\":\n        return \" \\\\uparrow{} \";\n\n      default:\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n    }\n  }\n}; //\n"],
  "mappings": "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",
  "names": ["chemParse", "output", "o", "a", "b", "_", "x", "_X", "$$", "_match", "input", "match", "_findObserveGroups", "rm", "text", "bond", "ce", "p", "parenthesisLevel", "rd", "rq", "stateOfAggregation", "colorOutput", "comma", "operator", "space", "go", "d"]
}
