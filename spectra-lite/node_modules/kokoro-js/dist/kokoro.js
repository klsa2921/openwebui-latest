import{StyleTextToSpeech2Model as e,AutoTokenizer as a,Tensor as r,RawAudio as l}from"@huggingface/transformers";import{phonemize as n}from"phonemizer";import t from"path";import i from"fs/promises";function g(e){if(e.includes("."))return e;if(e.includes(":")){let[a,r]=e.split(":").map(Number);return 0===r?`${a} o'clock`:r<10?`${a} oh ${r}`:`${a} ${r}`}let a=parseInt(e.slice(0,4),10);if(a<1100||a%1e3<10)return e;let r=e.slice(0,2),l=parseInt(e.slice(2,4),10),n=e.endsWith("s")?"s":"";if(a%1e3>=100&&a%1e3<=999){if(0===l)return`${r} hundred${n}`;if(l<10)return`${r} oh ${l}${n}`}return`${r} ${l}${n}`}function o(e){const a="$"===e[0]?"dollar":"pound";if(isNaN(Number(e.slice(1))))return`${e.slice(1)} ${a}s`;if(!e.includes(".")){let r="1"===e.slice(1)?"":"s";return`${e.slice(1)} ${a}${r}`}const[r,l]=e.slice(1).split("."),n=parseInt(l.padEnd(2,"0"),10);return`${r} ${a}${"1"===r?"":"s"} and ${n} ${"$"===e[0]?1===n?"cent":"cents":1===n?"penny":"pence"}`}function c(e){let[a,r]=e.split(".");return`${a} point ${r.split("").join(" ")}`}const s=new RegExp(`(\\s*[${u=';:,.!?¡¿—…"«»“”(){}[]',u.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}]+\\s*)+`,"g");var u;async function d(e,a="a",r=!0){r&&(e=function(e){return e.replace(/[‘’]/g,"'").replace(/«/g,"“").replace(/»/g,"”").replace(/[“”]/g,'"').replace(/\(/g,"«").replace(/\)/g,"»").replace(/、/g,", ").replace(/。/g,". ").replace(/！/g,"! ").replace(/，/g,", ").replace(/：/g,": ").replace(/；/g,"; ").replace(/？/g,"? ").replace(/[^\S \n]/g," ").replace(/  +/," ").replace(/(?<=\n) +(?=\n)/g,"").replace(/\bD[Rr]\.(?= [A-Z])/g,"Doctor").replace(/\b(?:Mr\.|MR\.(?= [A-Z]))/g,"Mister").replace(/\b(?:Ms\.|MS\.(?= [A-Z]))/g,"Miss").replace(/\b(?:Mrs\.|MRS\.(?= [A-Z]))/g,"Mrs").replace(/\betc\.(?! [A-Z])/gi,"etc").replace(/\b(y)eah?\b/gi,"$1e'a").replace(/\d*\.\d+|\b\d{4}s?\b|(?<!:)\b(?:[1-9]|1[0-2]):[0-5]\d\b(?!:)/g,g).replace(/(?<=\d),(?=\d)/g,"").replace(/[$£]\d+(?:\.\d+)?(?: hundred| thousand| (?:[bm]|tr)illion)*\b|[$£]\d+\.\d\d?\b/gi,o).replace(/\d*\.\d+/g,c).replace(/(?<=\d)-(?=\d)/g," to ").replace(/(?<=\d)S/g," S").replace(/(?<=[BCDFGHJ-NP-TV-Z])'?s\b/g,"'S").replace(/(?<=X')S\b/g,"s").replace(/(?:[A-Za-z]\.){2,} [a-z]/g,(e=>e.replace(/\./g,"-"))).replace(/(?<=[A-Z])\.(?=[A-Z])/gi,"-").trim()}(e));const l=function(e,a){const r=[];let l=0;for(const n of e.matchAll(a)){const a=n[0];l<n.index&&r.push({match:!1,text:e.slice(l,n.index)}),a.length>0&&r.push({match:!0,text:a}),l=n.index+a.length}return l<e.length&&r.push({match:!1,text:e.slice(l)}),r}(e,s),t="a"===a?"en-us":"en",i=(await Promise.all(l.map((async({match:e,text:a})=>e?a:(await n(a,t)).join(" "))))).join("");let u=i.replace(/kəkˈoːɹoʊ/g,"kˈoʊkəɹoʊ").replace(/kəkˈɔːɹəʊ/g,"kˈəʊkəɹəʊ").replace(/ʲ/g,"j").replace(/r/g,"ɹ").replace(/x/g,"k").replace(/ɬ/g,"l").replace(/(?<=[a-zɹː])(?=hˈʌndɹɪd)/g," ").replace(/ z(?=[;:,.!?¡¿—…"«»“” ]|$)/g,"z");return"a"===a&&(u=u.replace(/(?<=nˈaɪn)ti(?!ː)/g,"di")),u.trim()}const m=Object.freeze({af_heart:{name:"Heart",language:"en-us",gender:"Female",traits:"❤️",targetQuality:"A",overallGrade:"A"},af_alloy:{name:"Alloy",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C"},af_aoede:{name:"Aoede",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_bella:{name:"Bella",language:"en-us",gender:"Female",traits:"🔥",targetQuality:"A",overallGrade:"A-"},af_jessica:{name:"Jessica",language:"en-us",gender:"Female",targetQuality:"C",overallGrade:"D"},af_kore:{name:"Kore",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_nicole:{name:"Nicole",language:"en-us",gender:"Female",traits:"🎧",targetQuality:"B",overallGrade:"B-"},af_nova:{name:"Nova",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C"},af_river:{name:"River",language:"en-us",gender:"Female",targetQuality:"C",overallGrade:"D"},af_sarah:{name:"Sarah",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_sky:{name:"Sky",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C-"},am_adam:{name:"Adam",language:"en-us",gender:"Male",targetQuality:"D",overallGrade:"F+"},am_echo:{name:"Echo",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_eric:{name:"Eric",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_fenrir:{name:"Fenrir",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_liam:{name:"Liam",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_michael:{name:"Michael",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_onyx:{name:"Onyx",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_puck:{name:"Puck",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_santa:{name:"Santa",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D-"},bf_emma:{name:"Emma",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"B",overallGrade:"B-"},bf_isabella:{name:"Isabella",language:"en-gb",gender:"Female",targetQuality:"B",overallGrade:"C"},bm_george:{name:"George",language:"en-gb",gender:"Male",targetQuality:"B",overallGrade:"C"},bm_lewis:{name:"Lewis",language:"en-gb",gender:"Male",targetQuality:"C",overallGrade:"D+"},bf_alice:{name:"Alice",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"C",overallGrade:"D"},bf_lily:{name:"Lily",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"C",overallGrade:"D"},bm_daniel:{name:"Daniel",language:"en-gb",gender:"Male",traits:"🚹",targetQuality:"C",overallGrade:"D"},bm_fable:{name:"Fable",language:"en-gb",gender:"Male",traits:"🚹",targetQuality:"B",overallGrade:"C"}});const p=new Map;async function f(e){if(p.has(e))return p.get(e);const a=new Float32Array(await async function(e){if(i?.readFile){const a="undefined"!=typeof __dirname?__dirname:import.meta.dirname,r=t.resolve(a,`../voices/${e}.bin`),{buffer:l}=await i.readFile(r);return l}const a=`https://huggingface.co/onnx-community/Kokoro-82M-v1.0-ONNX/resolve/main/voices/${e}.bin`;let r;try{r=await caches.open("kokoro-voices");const e=await r.match(a);if(e)return await e.arrayBuffer()}catch(e){console.warn("Unable to open cache",e)}const l=await fetch(a),n=await l.arrayBuffer();if(r)try{await r.put(a,new Response(n,{headers:l.headers}))}catch(e){console.warn("Unable to cache file",e)}return n}(e));return p.set(e,a),a}class y{constructor(e,a){this.model=e,this.tokenizer=a}static async from_pretrained(r,{dtype:l="fp32",device:n=null,progress_callback:t=null}={}){const i=e.from_pretrained(r,{progress_callback:t,dtype:l,device:n}),g=a.from_pretrained(r,{progress_callback:t}),o=await Promise.all([i,g]);return new y(...o)}get voices(){return m}list_voices(){console.table(m)}_validate_voice(e){if(!m.hasOwnProperty(e))throw console.error(`Voice "${e}" not found. Available voices:`),console.table(m),new Error(`Voice "${e}" not found. Should be one of: ${Object.keys(m).join(", ")}.`)}async generate(e,{voice:a="af_heart",speed:n=1}={}){this._validate_voice(a);const t=a.at(0),i=await d(e,t),{input_ids:g}=this.tokenizer(i,{truncation:!0}),o=256*Math.min(Math.max(g.dims.at(-1)-2,0),509),c=(await f(a)).slice(o,o+256),s={input_ids:g,style:new r("float32",c,[1,256]),speed:new r("float32",[n],[1])},{waveform:u}=await this.model(s);return new l(u.data,24e3)}}export{y as KokoroTTS};
